<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[菜鸟笔记--AJAX]]></title>
      <url>http://yoursite.com/2016/06/16/test3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>加油学习~奋斗 </p>
</blockquote>
<h2 id="什么是AJAX？"><a href="#什么是AJAX？" class="headerlink" title="什么是AJAX？"></a>什么是AJAX？</h2><p>AJAX是一种无需刷新页面就能够从服务器取得数据的方法(“异步”特性),允许你根据用户事件来更新部分页面内容。它是使用XMLHttpRequest对象(AJAX核心)与服务器端通信的脚本语言。它可以发送及接收各种格式的信息，包括JSON、XML、HTML和文本文件。<br><a id="more"></a><br>比如，我们注册的时候信息填写错误，是不是没刷新页面就能直接看到信息提示，比如我们玩QQ的时候，有什么消息都会自动提醒你，不需要你去刷新页面，不会影响你干别的事情，这就是Ajax做的事情。</p>
<h2 id="Ajax的原理"><a href="#Ajax的原理" class="headerlink" title="Ajax的原理"></a>Ajax的原理</h2><p>通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。</p>
<h3 id="XHR对象的相关属性"><a href="#XHR对象的相关属性" class="headerlink" title="XHR对象的相关属性:"></a>XHR对象的相关属性:</h3><ul>
<li>onreadystatechange  每次状态改变所触发事件的事件处理程序，类似于window.onload</li>
<li>responseText   作为响应主体被返回的文本，也就是服务器返回的信息</li>
<li>responseXML    从服务器进程返回的DOM兼容的文档数据对象。</li>
<li>status         响应的HTTP状态  　　</li>
<li>statusText     HTTP状态说明  　　</li>
<li>readyState     请求过程的当前状态，下面是该属性的取值<pre><code>0 ：未初始化,对象已建立，但是尚未调用open方法
1 ：启动，已经调用open方法尚，尚未调用send方法
2 ：发送, send方法已调用，尚未接收到响应
3 ：接收，已经接收到部分响应数据
4 ：完成，数据接收完毕,可以再客户端使用了
</code></pre></li>
</ul>
<h3 id="XHR对象的方法"><a href="#XHR对象的方法" class="headerlink" title="XHR对象的方法:"></a>XHR对象的方法:</h3><ul>
<li>abort()    导致当前正在执行的请求被取消</li>
<li>getAllResponseHeaders()    返回包含所有响应头的名称和值的单个字符</li>
<li>getResponseHeader(name)    返回响应头中指定的名称和值</li>
<li>open(method,url,async,username,pwd)    设置HTTP方法（get或post）等</li>
<li>send(content)    发出带有指定主体内容的请求</li>
<li>setRequestHeader(name,value)    使用指定的名称和值设置请求头</li>
</ul>
<h2 id="创建一个Ajax的步骤"><a href="#创建一个Ajax的步骤" class="headerlink" title="创建一个Ajax的步骤"></a>创建一个Ajax的步骤</h2><p>  1.创建ajax对象<br>  2.链接服务器<br>  3.发送请求<br>  4.接收返回信息<br>下面来看一个栗子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    	<span class="keyword">var</span> oBtn=<span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>);</span><br><span class="line"></span><br><span class="line">    	oBtn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//1.创建ajax对象</span></span><br><span class="line">            <span class="keyword">var</span> oAjax=<span class="literal">null</span>;</span><br><span class="line">	        <span class="comment">//兼容处理</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">                oAjax=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                oAjax=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);<span class="comment">//IE下创建ajax对象</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2.链接服务器</span></span><br><span class="line">            oAjax.open(<span class="string">'GET'</span>,<span class="string">'mumu.txt'</span>,<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//3.发送请求</span></span><br><span class="line">            oAjax.send();</span><br><span class="line">            <span class="comment">//4.接收返回信息</span></span><br><span class="line">            oAjax.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	            <span class="keyword">if</span>(oAjax.readyState==<span class="number">4</span>)&#123;</span><br><span class="line">	                <span class="keyword">if</span>(oAjax.status==<span class="number">200</span>)&#123;</span><br><span class="line">	                      </span><br><span class="line">	                    <span class="built_in">console</span>.log(<span class="string">"成功:"</span>+oAjax.responseText);</span><br><span class="line">	                &#125;</span><br><span class="line">	                <span class="keyword">else</span>&#123;</span><br><span class="line">	                    <span class="built_in">console</span>.log(<span class="string">"失败"</span>);</span><br><span class="line">	                &#125;</span><br><span class="line">	            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>注意：如果使用POST方式发送数据的话，在调用send()方法前，需要设置请求的类型：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpRequest.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="open-请求方法，请求url，是否异步-方法有三个参数："><a href="#open-请求方法，请求url，是否异步-方法有三个参数：" class="headerlink" title="open(请求方法，请求url，是否异步)方法有三个参数："></a>open(请求方法，请求url，是否异步)方法有三个参数：</h3><ul>
<li>请求方法：HTTP请求方法 - GET、POST</li>
<li>请求url：出于安全考虑，不能调用第三方域的页面内容。当调用open()方法时，一定确认使用相同域名内的页面，否则会得到“permission denied”的错误提示。</li>
<li>是否异步：如果是true（默认值），表示是异步请求，false表示同步。</li>
</ul>
<h3 id="GET和POST"><a href="#GET和POST" class="headerlink" title="GET和POST:"></a>GET和POST:</h3><ul>
<li>GET 常用于向服务器查询某些信息，请求的数据会附在URL之后，提交的数据最多只能是1024字节，与 POST 相比，GET更简单也更快，并且在大部分情况下都能用，比如浏览帖子</li>
<li>POST 常用于向服务器发送应该被保存的数据或者修改服务器上的资源，把提交的数据放置在HTTP包的包体中。理论上POST没有限制，可传较大量的数据。在以下情况下可使用：<br>无法使用缓存文件（更新服务器上的文件或数据库）<br>向服务器发送大量数据（POST 没有数据量限制）<br>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li>
</ul>
<h2 id="ajax的优缺点"><a href="#ajax的优缺点" class="headerlink" title="ajax的优缺点"></a>ajax的优缺点</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul>
<li>最大的特点是页面无刷新，在页面内与服务器通信，给用户的体验非常好。</li>
<li>优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用</li>
<li>Ajax在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载。</li>
</ul>
<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul>
<li>ajax不支持浏览器back按钮。</li>
<li>安全问题 AJAX暴露了与服务器交互的细节。</li>
<li>对搜索引擎的支持比较弱。</li>
<li>破坏了程序的异常机制。</li>
<li>不容易调试。</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://segmentfault.com/a/1190000000691919" target="_blank" rel="external">ajax</a> </li>
<li><a href="http状态码详解">http状态码详解</a> </li>
<li><a href="http://www.cnblogs.com/SanMaoSpace/p/3139186.html" target="_blank" rel="external">JSON与XML</a> </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[菜鸟笔记--js数据类型及判别]]></title>
      <url>http://yoursite.com/2016/06/15/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%88%A4%E5%88%AB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>加油学习~奋斗</p>
</blockquote>
<h2 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h2><p>5种基本数据类型：<code>Undefined、Null、Boolean、Number、String</code>。<br>还有一种复杂的数据类型Object，Object本质是一组无序的名值对组成的。<br><a id="more"></a></p>
<ul>
<li><code>Undefined</code>类型只有一个值:即undefined，使用var声明变量，但是未对初始化的，这个变量就是Undefined类型的，undefined值是派生自null值的，所以undefined==null</li>
<li><code>Null</code>类型也只有一个值:null值表示一个空对象的指针。</li>
<li><code>Boolean</code>类型：只有两个字面值true和false。但是js中多有的变量都可以使用Boolean()函数转换成一个Boolean类型的值。</li>
<li><code>Number</code>类型：整数和浮点数。NaN是一个特殊的数值,NaN的特点：<br>1、任何涉及NaN的操作都会返回NaN。<br>2、NaN对任何值都不相等，包括自己NaN本身。<br>针对NaN特性，JS内置了isNaN()函数，来确定数值是不是NaN类型。</li>
</ul>
<h2 id="js数据类型判别"><a href="#js数据类型判别" class="headerlink" title="js数据类型判别"></a>js数据类型判别</h2><ul>
<li><p><code>typeof</code>操作符：对一个变量进行检测变量的类型，用法：typeof 123; 或者 typeof(123); 会返回”number”<br><code>用typeof判断基本类型</code>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>;<span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">// object  ,这是因为特殊值null被认为是一个空的对象引用。</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">false</span>; <span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">123</span>; <span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'abc'</span>; <span class="comment">//string</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span>; <span class="comment">// number ,NaN非数值是一个特殊的数值。 这个数值用来表示一个本来要返回数值的操作数未返回数值的情况。</span></span><br></pre></td></tr></table></figure>
<p><code>用typeof判断引用类型</code>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">//object</span></span><br><span class="line"><span class="keyword">typeof</span> /\d/ <span class="comment">//object</span></span><br><span class="line"><span class="keyword">typeof</span> [] <span class="comment">//object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Date</span>() <span class="comment">//object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">//function</span></span><br></pre></td></tr></table></figure>
<p>使用typeof判断引用型数据除了function以外都是object，还有就是typeof在一些低版本中检测正则会返回function</p>
</li>
<li><p><code>instanceof</code>用于判断一个变量是否是某个对象的实例，和typeof最实质上的区别—是一个三目运算式，如果变量是给定引用类型的实例，那么instanceof操作符就会返回true。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[];</span><br><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> <span class="built_in">Array</span>) <span class="comment">//返回true</span></span><br><span class="line"><span class="number">123</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span>; <span class="comment">// 返回false ，123是基本数据类型</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="number">123</span>) <span class="keyword">instanceof</span> <span class="built_in">Number</span>; <span class="comment">//返回false，因为Number（123）调用Number函数。结果是 一个数值属于是基本数据类型，所以false。</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>) <span class="keyword">instanceof</span> <span class="built_in">Number</span>;<span class="comment">//true，因为这里new创建了一个Number的实例，是一个对象</span></span><br><span class="line">(&#123;&#125;) <span class="keyword">instanceof</span> <span class="built_in">Object</span>;<span class="comment">//true         </span></span><br><span class="line">(<span class="regexp">/\d/</span>) <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>;<span class="comment">//true </span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>;  <span class="comment">//true                </span></span><br><span class="line">(<span class="keyword">new</span> <span class="built_in">Date</span>()) <span class="keyword">instanceof</span> <span class="built_in">Date</span> ; <span class="comment">//true   </span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;) <span class="keyword">instanceof</span> <span class="built_in">Function</span>; <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>instanceof 操作符检测基本类型的值都会返回false，instanceof 后面一定要是对象类型，并且大小写不能错</p>
</li>
<li><p><code>constructor</code> 返回对象相应的构造函数，效果与instanceof一样</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span>.constructor == <span class="built_in">Boolean</span>;<span class="comment">//true</span></span><br><span class="line">[].constructor == <span class="built_in">Array</span>;<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>使用instaceof和construcor,被判断的array必须是在当前页面声明的！比如，一个页面（父页面）有一个框架，框架中引用了一个页面（子页面），在子页面中声明了一个array，并将其赋值给父页面的一个变量，这时判断该变量，Array == object.constructor;会返回false；<br>原因：<br>1、array属于引用型数据，在传递过程中，仅仅是引用地址的传递。<br>2、每个页面的Array原生对象所引用的地址是不一样的，在子页面声明的array，所对应的构造函数，是子页面的Array对象；父页面来进行判断，使用的Array并不等于子页面的Array；切记，不然很难跟踪问题！</p>
</li>
<li><code>Object.prototype.toString.call( )</code> Obeject原型上的toString方法,都会返回一个[object NativeConstructorName]格式的字符串。这是一种较准确的判断数据类型的方法，可以区分对象，数组和null<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">123</span>);<span class="comment">//[object Number]</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>还有其他的就不太了解了</p>
]]></content>
    </entry>
    
  
  
</search>
